openapi: 3.0.0
info:
  title: Allisone API
  version: 1.7.1
  description: >+

    Allisone API documentation


    This documentation is intended for partners who want to collaborate with Allisone. It describes the different routes available to receive and send data between Allisone and your system. It is updated automatically as soon as new developments are made.


    If you have any question, please contact Jordan (jordan@allisone.ai) or Sacha (sacha@allisone.ai)


    # Workflow


    ![Api schema](https://allisone-release-notes.s3.eu-west-3.amazonaws.com/Integrations-Dental+Software.png)


    # Authentication


    Allisone offers one form of authentication:


    OAuth2 OAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications.


    ### cURL

    ```sh

    curl --location --request POST 'https://authv2.allisone.ai/realms/partner/protocol/openid-connect/token' \

    --header 'Content-Type: application/x-www-form-urlencoded' \

    --data-urlencode 'grant_type=client_credentials' \

    --data-urlencode 'client_id=CLIENT_ID' \

    --data-urlencode 'client_secret=CLIENT_SECRET'

    ```


    ### Javascript

    ```js

    var request = require('request');

    var options = {
      'method': 'POST',
      'url': 'https://authv2.allisone.ai/realms/partner/protocol/openid-connect/token',
      'headers': {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      form: {
        'grant_type': 'client_credentials',
        'client_id': 'CLIENT_ID',
        'client_secret': 'CLIENT_SECRET'
      }
    };

    request(options, function (error, response) {
      if (error) throw new Error(error);
      console.log(response.body);
    });

    ```


    ### Python

    ```python

    import requests


    url = "https://authv2.allisone.ai/realms/partner/protocol/openid-connect/token"


    payload='grant_type=client_credentials&client_id=CLIENT_ID&client_secret=CLIENT_SECRET'

    headers = {
      'Content-Type': 'application/x-www-form-urlencoded'
    }


    response = requests.request("POST", url, headers=headers, data=payload)


    print(response.text)

    ```

  x-logo:
    url: https://allisone-release-notes.s3.eu-west-3.amazonaws.com/logo+%2B+name+Dark+blue.png
    altText: Allisone logo
paths:
  /api/v2/diagnostic:
    post:
      description: Create diagnostic
      tags:
        - Diagnostic
      parameters:
        - in: header
          name: Authorization
          required: false
          description: Bearer token
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: File to analyze
                  type: string
                  format: binary
              required:
                - file
      x-codeSamples:
        - lang: cURL
          source: >

            curl --location --request POST 'https://app.allisone.ai/api/v2/diagnostic' \

            --header 'Authorization: Bearer BEARER_TOKEN' \

            --form 'file=@"/path/FILENAME.png"'
          label: cURL
        - lang: Node
          source: |

            var request = require('request');
            var fs = require('fs');
            var options = {
              'method': 'POST',
              'url': 'https://app.allisone.ai/api/v2/diagnostic',
              'headers': {
                'Authorization': 'Bearer BEARER_TOKEN'
              },
              formData: {
                'file': {
                  'value': fs.createReadStream('/path/FILENAME.png'),
                  'options': {
                    'filename': 'FILENAME.png',
                    'contentType': null
                  }
                }
              }
            };
            request(options, function (error, response) {
              if (error) throw new Error(error);
              console.log(response.body);
            });
          label: Node
        - lang: Python2.7
          source: >

            import requests


            url = "https://app.allisone.ai/api/v2/diagnostic"


            payload={}

            files=[
              ('file',('FILENAME.png',open('/path/FILENAME.png','rb'),'image/png'))
            ]

            headers = {
              'Authorization': 'Bearer BEARER_TOKEN'
            }


            response = requests.request("POST", url, headers=headers, data=payload, files=files)


            print(response.text)
          label: Python
      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                description: Default response
                type: object
                properties:
                  DECAY:
                    type: array
                    description: An array of teeth containing decays
                    example:
                      - "11"
                      - "12"
                      - "13"
                    items: {}
                  CROWN:
                    type: array
                    description: An array of teeth containing crowns
                    example:
                      - "33"
                      - "45"
                      - "31"
                      - "25"
                    items: {}
                  MISSING_TOOTH:
                    type: array
                    description: An array of missing teeth
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  ROOT_CANAL:
                    type: array
                    description: An array of endodontics treatments (root canals)
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  IMPLANT:
                    type: array
                    description: An array of implants
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  INLAY_CORE:
                    type: array
                    description: An array of inlay cores
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  PERI_APICAL_LESION:
                    type: array
                    description: An array of peri apical lesions
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  ROOT:
                    type: array
                    description: An array of roots
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  FILLING:
                    type: array
                    description: An array of fillings
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  AMALGAM:
                    type: array
                    description: An array of amalgams
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  INLAY:
                    type: array
                    description: An array of inlays-onlays
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  VENEER:
                    type: array
                    description: An array of veneers
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  SCREW_POST:
                    type: array
                    description: An array of screw posts
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  POST:
                    type: array
                    description: An array of posts
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  BRIDGE:
                    type: array
                    description: An array of missing teeth
                    example:
                      - tooth_numbers:
                          - "16"
                          - "15"
                          - "14"
                          - "13"
                        pillar_teeth:
                          - "15"
                          - "13"
                        bridge_teeth:
                          - "16"
                          - "14"
                        anomaly_teeth: []
                      - tooth_numbers:
                          - "23"
                          - "24"
                        pillar_teeth:
                          - "24"
                        bridge_teeth:
                          - "23"
                        anomaly_teeth: []
                    items: {}
  "/api/v2/diagnostic/{id}":
    get:
      description: Get diagnostic by ID
      tags:
        - Diagnostic
      parameters:
        - description: Diagnostic ID
          required: false
          in: query
          name: id
          schema:
            type: number
        - in: header
          name: Authorization
          required: false
          description: Bearer token
          schema:
            type: string
      x-codeSamples:
        - lang: cURL
          source: >

            curl --location --request GET 'https://app.allisone.ai/api/v2/diagnostic/{id}' \

            --header 'Authorization: Bearer BEARER_TOKEN'
          label: cURL
        - lang: Node
          source: |

            var request = require('request');
            var options = {
              'method': 'GET',
              'url': 'https://app.allisone.ai/api/v2/diagnostic/{id}',
              'headers': {
                'Authorization': 'Bearer BEARER_TOKEN'
              },
              formData: {}
            };
            request(options, function (error, response) {
              if (error) throw new Error(error);
              console.log(response.body);
            });
          label: Node
        - lang: Python2.7
          source: >+

            import requests


            url = "https://app.allisone.ai/api/v2/diagnostic/{id}"


            payload={}

            files={}

            headers = {
              'Authorization': 'Bearer BEARER_TOKEN'
            }


            response = requests.request("GET", url, headers=headers, data=payload, files=files)


            print(response.text)

          label: Python
      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                description: Default response
                type: object
                properties:
                  DECAY:
                    type: array
                    description: An array of teeth containing decays
                    example:
                      - "11"
                      - "12"
                      - "13"
                    items: {}
                  CROWN:
                    type: array
                    description: An array of teeth containing crowns
                    example:
                      - "33"
                      - "45"
                      - "31"
                      - "25"
                    items: {}
                  MISSING_TOOTH:
                    type: array
                    description: An array of missing teeth
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  ROOT_CANAL:
                    type: array
                    description: An array of endodontics treatments (root canals)
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  IMPLANT:
                    type: array
                    description: An array of implants
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  INLAY_CORE:
                    type: array
                    description: An array of inlay cores
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  PERI_APICAL_LESION:
                    type: array
                    description: An array of peri apical lesions
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  ROOT:
                    type: array
                    description: An array of roots
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  FILLING:
                    type: array
                    description: An array of fillings
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  AMALGAM:
                    type: array
                    description: An array of amalgams
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  INLAY:
                    type: array
                    description: An array of inlays-onlays
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  VENEER:
                    type: array
                    description: An array of veneers
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  SCREW_POST:
                    type: array
                    description: An array of screw posts
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  POST:
                    type: array
                    description: An array of posts
                    example:
                      - "18"
                      - "28"
                      - "38"
                      - "48"
                    items: {}
                  BRIDGE:
                    type: array
                    description: An array of missing teeth
                    example:
                      - tooth_numbers:
                          - "16"
                          - "15"
                          - "14"
                          - "13"
                        pillar_teeth:
                          - "15"
                          - "13"
                        bridge_teeth:
                          - "16"
                          - "14"
                        anomaly_teeth: []
                      - tooth_numbers:
                          - "23"
                          - "24"
                        pillar_teeth:
                          - "24"
                        bridge_teeth:
                          - "23"
                        anomaly_teeth: []
                    items: {}
  /api/v2/partner/patient:
    post:
      description: Create patient
      tags:
        - Patient
      parameters:
        - in: header
          name: Authorization
          required: false
          description: Bearer token
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  type: object
                  description: Data
                  example:
                    - id: "42"
                      foo: bar
              required:
                - data
              type: object
      x-codeSamples:
        - lang: cURL
          source: >

            curl --location --request POST 'https://app.allisone.ai/api/v2/partner/patient' \

            --header 'Authorization: Bearer BEARER_TOKEN' --header 'Content-Type: application/json' --data-raw '{
                "data": {
                    "id": "PATIENT_ID",
                    "extraId": "OTHER_UNIQUE_ID"
                }
            }'
          label: cURL
        - lang: Node
          source: |

            var request = require('request');
            var options = {
              'method': 'POST',
              'url': 'https://app.allisone.ai/api/v2/partner/patient',
              'headers': {
                'Authorization': 'Bearer BEARER_TOKEN',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                "data": {
                  "id": "PATIENT_ID",
                  "extraId": "OTHER_UNIQUE_ID"
                }
              })
            };

            request(options, function (error, response) {
              if (error) throw new Error(error);
              console.log(response.body);
            });
          label: Node
        - lang: Python2.7
          source: >+

            import requests

            import json


            url = "https://app.allisone.ai/api/v2/partner/patient"


            payload = json.dumps({
              "data": {
                "id": "PATIENT_ID",
                "extraId": "OTHER_UNIQUE_ID"
              }
            })

            headers = {
              'Authorization': 'Bearer BEARER_TOKEN',
              'Content-Type': 'application/json'
            }


            response = requests.request("POST", url, headers=headers, data=payload)


            print(response.text)

          label: Python
      responses:
        default:
          description: Default Response
          content:
            application/json:
              schema:
                properties:
                  id:
                    id: string
                    example: 93bad00a-ce65-4bbd-bdbc-1dc04ef971c7
                    description: Patient ID
                type: object
  "/api/v2/partner/patient/{id}":
    get:
      description: Get patient by ID
      tags:
        - Patient
      parameters:
        - description: patient ID
          required: true
          in: path
          name: id
          schema:
            type: string
            format: uuid
        - in: header
          name: Authorization
          required: false
          description: Bearer token
          schema:
            type: string
      x-codeSamples:
        - lang: cURL
          source: >

            curl --location --request GET 'https://app.allisone.ai/api/v2/patient/{id}' \

            --header 'Authorization: Bearer BEARER_TOKEN'
          label: cURL
        - lang: Node
          source: |

            var request = require('request');
            var options = {
              'method': 'GET',
              'url': 'https://app.allisone.ai/api/v2/patient/{id}',
              'headers': {
                'Authorization': 'Bearer BEARER_TOKEN'
              },
              formData: {}
            };
            request(options, function (error, response) {
              if (error) throw new Error(error);
              console.log(response.body);
            });
          label: Node
        - lang: Python2.7
          source: >+

            import requests


            url = "https://app.allisone.ai/api/v2/patient/{id}"


            payload={}

            files={}

            headers = {
              'Authorization': 'Bearer BEARER_TOKEN'
            }


            response = requests.request("GET", url, headers=headers, data=payload, files=files)


            print(response.text)

          label: Python
      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                description: Default response
                properties:
                  id:
                    type: string
                  data:
                    type: object
                    description: Unique data sent by the partner on patient creation
                    properties:
                      id:
                        type: string
                      otherId:
                        type: string
                      foo:
                        type: string
                  patient:
                    type: object
                    description: Patient data
                    properties:
                      firstname:
                        type: string
                      lastname:
                        type: string
                      birthdate:
                        type: string
                      sex:
                        type: string
                type: object
    put:
      description: Replace patient by ID
      tags:
        - Patient
      parameters:
        - description: patient ID
          required: true
          in: path
          name: id
          schema:
            type: string
        - in: header
          name: Authorization
          required: false
          description: Bearer token
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - patient
                - data
              properties:
                patient:
                  type: object
                  required:
                    - firstname
                    - lastname
                    - birthdate
                    - sex
                    - email
                  properties:
                    firstname:
                      type: string
                    lastname:
                      type: string
                    birthdate:
                      type: string
                      format: date-time
                      description: date-time as described in
                        https://www.rfc-editor.org/rfc/rfc3339#section-5.6
                      example:
                        - 1970-01-01T00:00:00+00:00
                    sex:
                      type: string
                      pattern: ^[M|F]$
                      example:
                        - M or F
                    email:
                      type: string
                      format: email
                data:
                  type: object
      x-codeSamples:
        - lang: cURL
          source: >

            curl --location -g --request PUT 'https://app.allisone.ai/api/v2/patient/{id}' --header 'Authorization: Bearer BEARER_TOKEN' --header 'Content-Type: application/json' --data-raw '{
                "patient": {
                    "firstname": "foo",
                    "lastname": "bar",
                    "sex": "M",
                    "birthdate": "1970-01-01T00:00:00+00:00",
                    "email": "foo@bar.com"
                },
                "data": { "id":1234, "otherId":1234, "foo": "bar" }
            }'
          label: cURL
        - lang: Node
          source: |

            var myHeaders = new Headers();
            myHeaders.append("Authorization", "Bearer BEARER_TOKEN");
            myHeaders.append("Content-Type", "application/json");

            var raw = JSON.stringify({
              "patient": {
                "firstname": "foo",
                "lastname": "bar",
                "sex": "M",
                "birthdate": "1970-01-01T00:00:00+00:00",
                "email": "foo@bar.com"
              },
              "data": {
                "id": 1234,
                "otherId": 1234,
                "foo": "bar"
              }
            });

            var requestOptions = {
              method: 'PUT',
              headers: myHeaders,
              body: raw,
              redirect: 'follow'
            };

            fetch("https://app.allisone.ai/api/v2/patient/{id}", requestOptions)
              .then(response => response.text())
              .then(result => console.log(result))
              .catch(error => console.log('error', error));
          label: Node
        - lang: Python2.7
          source: >

            import requests

            import json


            url = "https://app.allisone.ai/api/v2/patient/{id}"


            payload = json.dumps({
              "patient": {
                "firstname": "foo",
                "lastname": "bar",
                "sex": "M",
                "birthdate": "1970-01-01T00:00:00+00:00",
                "email": "foo@bar.com"
              },
              "data": {
                "id": 1234,
                "otherId": 1234,
                "foo": "bar"
              }
            })

            headers = {
              'Authorization': 'Bearer BEARER_TOKEN',
              'Content-Type': 'application/json'
            }


            response = requests.request("PUT", url, headers=headers, data=payload)


            print(response.text)
          label: Python
      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                description: Default response
                properties:
                  id:
                    type: string
                  data:
                    type: object
                    description: Unique data sent by the partner on patient creation
                    properties:
                      id:
                        type: string
                      otherId:
                        type: string
                      foo:
                        type: string
                  patient:
                    type: object
                    description: Patient data
                    properties:
                      firstname:
                        type: string
                      lastname:
                        type: string
                      birthdate:
                        type: string
                      sex:
                        type: string
                type: object
    patch:
      description: Update patient by ID
      tags:
        - Patient
      parameters:
        - description: patient ID
          required: true
          in: path
          name: id
          schema:
            type: string
        - in: header
          name: Authorization
          required: false
          description: Bearer token
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                patient:
                  type: object
                  properties:
                    firstname:
                      type: string
                    lastname:
                      type: string
                    birthdate:
                      type: string
                      format: date-time
                      description: date-time as described in
                        https://www.rfc-editor.org/rfc/rfc3339#section-5.6
                      example:
                        - 1970-01-01T00:00:00+00:00
                    sex:
                      type: string
                      pattern: ^[M|F]$
                      example:
                        - M or F
                    email:
                      type: string
                      format: email
                data:
                  type: object
      x-codeSamples:
        - lang: cURL
          source: >

            curl --location -g --request PATCH 'https://app.allisone.ai/api/v2/patient/{id}' --header 'Authorization: Bearer BEARER_TOKEN' --header 'Content-Type: application/json' --data-raw '{
                "patient": {
                    "firstname": "foo",
                    "lastname": "bar",
                    "sex": "M",
                    "birthdate": "1970-01-01T00:00:00+00:00",
                    "email": "foo@bar.com"
                },
                "data": { "id":1234, "otherId":1234, "foo": "bar" }
            }'
          label: cURL
        - lang: Node
          source: |

            var myHeaders = new Headers();
            myHeaders.append("Authorization", "Bearer BEARER_TOKEN");
            myHeaders.append("Content-Type", "application/json");

            var raw = JSON.stringify({
              "patient": {
                "firstname": "foo",
                "lastname": "bar",
                "sex": "M",
                "birthdate": "1970-01-01T00:00:00+00:00",
                "email": "foo@bar.com"
              },
              "data": {
                "id": 1234,
                "otherId": 1234,
                "foo": "bar"
              }
            });

            var requestOptions = {
              method: 'PATCH',
              headers: myHeaders,
              body: raw,
              redirect: 'follow'
            };

            fetch("https://app.allisone.ai/api/v2/patient/{id}", requestOptions)
              .then(response => response.text())
              .then(result => console.log(result))
              .catch(error => console.log('error', error));
          label: Node
        - lang: Python2.7
          source: >

            import requests

            import json


            url = "https://app.allisone.ai/api/v2/patient/{id}"


            payload = json.dumps({
              "patient": {
                "firstname": "foo",
                "lastname": "bar",
                "sex": "M",
                "birthdate": "1970-01-01T00:00:00+00:00",
                "email": "foo@bar.com"
              },
              "data": {
                "id": 1234,
                "otherId": 1234,
                "foo": "bar"
              }
            })

            headers = {
              'Authorization': 'Bearer BEARER_TOKEN',
              'Content-Type': 'application/json'
            }


            response = requests.request("PATCH", url, headers=headers, data=payload)


            print(response.text)
          label: Python
      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                description: Default response
                properties:
                  id:
                    type: string
                  data:
                    type: object
                    description: Unique data sent by the partner on patient creation
                    properties:
                      id:
                        type: string
                      otherId:
                        type: string
                      foo:
                        type: string
                  patient:
                    type: object
                    description: Patient data
                    properties:
                      firstname:
                        type: string
                      lastname:
                        type: string
                      birthdate:
                        type: string
                      sex:
                        type: string
                type: object
  /api/v2/partner/patients:
    get:
      description: Get patients
      tags:
        - Patient
      parameters:
        - in: header
          name: Authorization
          required: false
          description: Bearer token
          schema:
            type: string
      x-codeSamples:
        - lang: cURL
          source: >

            curl --location --request GET 'https://app.allisone.ai/api/v2/patients' \

            --header 'Authorization: Bearer BEARER_TOKEN'
          label: cURL
        - lang: Node
          source: |

            var request = require('request');
            var options = {
              'method': 'GET',
              'url': 'https://app.allisone.ai/api/v2/patients',
              'headers': {
                'Authorization': 'Bearer BEARER_TOKEN'
              },
              formData: {}
            };
            request(options, function (error, response) {
              if (error) throw new Error(error);
              console.log(response.body);
            });
          label: Node
        - lang: Python2.7
          source: >+

            import requests


            url = "https://app.allisone.ai/api/v2/patients"


            payload={}

            files={}

            headers = {
              'Authorization': 'Bearer BEARER_TOKEN'
            }


            response = requests.request("GET", url, headers=headers, data=payload, files=files)


            print(response.text)

          label: Python
      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                description: Default response
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    data:
                      type: object
                      description: Unique data sent by the partner on patient creation
                      properties:
                        id:
                          type: string
                        otherId:
                          type: string
                        foo:
                          type: string
                    patient:
                      type: object
                      description: Patient data
                      properties:
                        firstname:
                          type: string
                        lastname:
                          type: string
                        birthdate:
                          type: string
                        sex:
                          type: string
  "/api/v2/treatment/{id}":
    get:
      description: Get treatment by ID
      tags:
        - Treatment
      parameters:
        - description: Treatment ID
          required: true
          in: path
          name: id
          schema:
            type: number
        - in: header
          name: Authorization
          required: false
          description: Bearer token
          schema:
            type: string
      x-codeSamples:
        - lang: cURL
          source: >

            curl --location --request GET 'https://app.allisone.ai/api/v2/treatment/{id}' \

            --header 'Authorization: Bearer BEARER_TOKEN'
          label: cURL
        - lang: Node
          source: |

            var request = require('request');
            var options = {
              'method': 'GET',
              'url': 'https://app.allisone.ai/api/v2/treatment/{id}',
              'headers': {
                'Authorization': 'Bearer BEARER_TOKEN'
              },
              formData: {}
            };
            request(options, function (error, response) {
              if (error) throw new Error(error);
              console.log(response.body);
            });
          label: Node
        - lang: Python2.7
          source: >+

            import requests


            url = "https://app.allisone.ai/api/v2/treatment/{id}"


            payload={}

            files={}

            headers = {
              'Authorization': 'Bearer BEARER_TOKEN'
            }


            response = requests.request("GET", url, headers=headers, data=payload, files=files)


            print(response.text)

          label: Python
      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                description: Default response
                type: object
                properties:
                  id:
                    type: string
                    description: Treatment ID
                    example: "42"
                  created:
                    type: string
                    description: creation date
                    example: Thu Mar 31 2022 01:43:46 GMT-0700 (Pacific Daylight Time)
                  TreatmentItems:
                    type: array
                    description: Array of operations
                    example:
                      - - information:
                            id: "42"
                            practitioner: John Doe
                            action_type: Bridge
                            released_at:
                              Thu Mar 31 2022 01:43:46 GMT-0700 (Pacific
                              Daylight Time)
                            canceled: "false"
                          teeth:
                            - "11"
                            - "12"
                            - "13"
                        - information:
                            id: "43"
                            practitioner: John Doe
                            action_type: Extraction
                            released_at:
                              Thu Mar 31 2022 01:43:46 GMT-0700 (Pacific
                              Daylight Time)
                            canceled: "true"
                          tooth_location:
                            - "14"
                    items: {}
  "/api/v2/confirmUpload/{key}":
    get:
      description: Confirm upload
      tags:
        - Upload Image
      parameters:
        - description: Image key
          required: true
          in: path
          name: key
          schema:
            type: string
        - in: header
          name: Authorization
          required: false
          description: Bearer token
          schema:
            type: string
      x-codeSamples:
        - lang: cURL
          source: >

            curl --location --request GET 'https://app.allisone.ai/api/v2/confirmUpload/{key}' \

            --header 'Authorization: Bearer BEARER_TOKEN'
          label: cURL
        - lang: Node
          source: |

            var request = require('request');
            var options = {
              'method': 'GET',
              'url': 'https://app.allisone.ai/api/v2/confirmUpload/{key}',
              'headers': {
                'Authorization': 'Bearer BEARER_TOKEN'
              },
              formData: {}
            };
            request(options, function (error, response) {
              if (error) throw new Error(error);
              console.log(response.body);
            });
          label: Node
        - lang: Python2.7
          source: >+

            import requests


            url = "https://app.allisone.ai/api/v2/confirmUpload/{key}"


            payload={}

            files={}

            headers = {
              'Authorization': 'Bearer BEARER_TOKEN'
            }


            response = requests.request("GET", url, headers=headers, data=payload, files=files)


            print(response.text)

          label: Python
      responses:
        "200":
          description: Default Response
  /api/v2/getUploadURL:
    post:
      description: Get image upload url
      tags:
        - Upload Image
      parameters:
        - in: header
          name: Authorization
          required: false
          description: Bearer token
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - patientId
                - contentType
              properties:
                patientId:
                  type: string
                  description: patientId
                  format: uuid
                contentType:
                  type: string
                  pattern: ^(application/dicom$|image/)
      x-codeSamples:
        - lang: cURL
          source: >

            curl --location 'https://app.allisone.ai/api/v2/getUploadURL' --header 'Content-Type: application/json' --header 'Accept: application/json' --header 'Authorization: Bearer BEARER_TOKEN' --data '{
              "patientId": "ID",
              "contentType":"application/dicom"
            }'
          label: cURL
        - lang: Node
          source: |+

            var request = require('request');
            var options = {
              'method': 'POST',
              'url': 'https://app.allisone.ai/api/v2/getUploadURL',
              'headers': {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': 'Bearer BEARER_TOKEN'
              },
              body: JSON.stringify({
                "patientId": "ID",
                "contentType": "application/dicom"
              })

            };
            request(options, function (error, response) {
              if (error) throw new Error(error);
              console.log(response.body);
            });

          label: Node
        - lang: Python2.7
          source: >+

            import requests

            import json


            url = "https://app.allisone.ai/api/v2/getUploadURL"


            payload = json.dumps({
              "patientId": "ID",
              "contentType": "application/dicom"
            })

            headers = {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
              'Authorization': 'Bearer BEARER_TOKEN'
            }


            response = requests.request("POST", url, headers=headers, data=payload)


            print(response.text)

          label: Python
      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                description: Default response
                type: object
                properties:
                  url:
                    type: string
                    description: Upload url
                    format: uuid
                    example: 460a6d87-689c-4661-a526-a52450bbe2d7
                  confirmUrl:
                    type: string
                    description: Confirmation url
                    format: uri
                    example: https://app.allisone.ai/api/v2/getUploadURL/460a6d87-689c-4661-a526-a52450bbe2d7
